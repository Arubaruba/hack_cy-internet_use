// Generated by CoffeeScript 1.10.0
(function() {
  d3.xml('access_to_internet_over_time.svg', function(xml) {
    var BAR_OFFSET_X, BINARY_DIGIT_COUNT, BINARY_OFFSET_INITIAL_Y, BINARY_OFFSET_Y, C_BACKGROUND, DOCUMENT_WIDTH, MAX_BINARY_LINES, MAX_COUNTRIES, barTemplate, svg;
    C_BACKGROUND = '#272530';
    BAR_OFFSET_X = 80;
    MAX_COUNTRIES = 9;
    BINARY_DIGIT_COUNT = 12;
    BINARY_OFFSET_INITIAL_Y = 2;
    BINARY_OFFSET_Y = 11;
    MAX_BINARY_LINES = 23;
    DOCUMENT_WIDTH = 842;
    d3.select(document.body).style('background-color', C_BACKGROUND).style('margin', 0).style('font-family', 'Helvetica');
    svg = d3.select(document.body.appendChild(xml.documentElement));
    barTemplate = svg.select('#bar').remove();
    return d3.csv('internet_use_over_time.csv', function(importedWorldBankData) {
      var asdf, asdf1, countries, countryGroups, getCountryData, yearRange;
      yearRange = window.worldBankDataParser.yearRange(importedWorldBankData);
      countries = window.worldBankDataParser.countryData(importedWorldBankData);
      getCountryData = function(yearIndex) {
        var sortedCountries;
        sortedCountries = countries.map(function(country) {
          return {
            name: country.name,
            value: country.values[yearIndex]
          };
        }).sort(function(country1, country2) {
          return country2.value - country1.value;
        });
        return countries.map(function(country) {
          var c, i, j, len, rank;
          rank = 0;
          for (i = j = 0, len = sortedCountries.length; j < len; i = ++j) {
            c = sortedCountries[i];
            if (country.name === c.name) {
              rank = i;
            }
          }
          return {
            name: country.name,
            ranking: rank,
            value: country.values[yearIndex]
          };
        });
      };
      asdf = getCountryData(1);
      asdf1 = getCountryData(10);
      countryGroups = svg.append('g').selectAll('g').data(getCountryData(10)).enter().append('g').html(function(country, countryIndex) {
        var bar, binary, binaryLineCount, binaryTemplate, digits, i, j, k, lineIndex, randomizedBinary, ref, ref1, results;
        bar = d3.select(svg.node().appendChild(barTemplate.node().cloneNode(true))).transition().ease('cubic-in').duration(200).attr('transform', "translate(" + (BAR_OFFSET_X * country.ranking) + ", 0)").attr('name', countryIndex);
        bar.select('#country-name').text(country.name);
        binaryTemplate = bar.select('#binary').remove();
        binaryLineCount = MAX_BINARY_LINES * country.value / 100;
        results = [];
        for (lineIndex = j = 0, ref = Math.floor(binaryLineCount); 0 <= ref ? j <= ref : j >= ref; lineIndex = 0 <= ref ? ++j : --j) {
          binary = d3.select(bar.node().appendChild(binaryTemplate.node().cloneNode(true))).style('font-family', 'monospace').attr('transform', "translate(0, " + ((MAX_BINARY_LINES - lineIndex) * BINARY_OFFSET_Y + BINARY_OFFSET_INITIAL_Y) + ")");
          digits = Math.floor(binaryLineCount) !== lineIndex ? BINARY_DIGIT_COUNT : BINARY_DIGIT_COUNT * (binaryLineCount - Math.floor(binaryLineCount));
          randomizedBinary = '';
          for (i = k = 0, ref1 = digits; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
            randomizedBinary += (Math.ceil(Math.random() * 100)) % 2;
          }
          results.push(binary.select('text').text(randomizedBinary).style('font-family', 'monospace'));
        }
        return results;
      });
      return d3.select('#slider-rect').on('mousemove', function() {
        var data;
        d3.select('#slider-sym').attr('transform', "translate(" + (Math.ceil(d3.mouse(this)[0]) - 50) + ",0)");
        console.log(d3.mouse(this)[0] / DOCUMENT_WIDTH);
        data = getCountryData(Math.floor(d3.mouse(this)[0] / DOCUMENT_WIDTH * (yearRange.endDate - yearRange.startDate)));
        console.log(yearRange.end - yearRange.start);
        return d3.select(document.body).selectAll('#bar').transition().ease('cubic-in').duration(200).attr('transform', function(country, countryIndex) {
          return "translate(" + (BAR_OFFSET_X * data[countryIndex].ranking) + ", 0)";
        }).each(function(c, ci) {
          var bar, binary, binaryLineCount, binaryTemplate, digits, i, j, k, lineIndex, randomizedBinary, ref, ref1, results;
          bar = d3.select(this);
          binaryTemplate = bar.select('#binary').remove();
          bar.selectAll('#binary').remove();
          binaryLineCount = MAX_BINARY_LINES * data[ci].value / 100;
          results = [];
          for (lineIndex = j = 0, ref = Math.floor(binaryLineCount); 0 <= ref ? j <= ref : j >= ref; lineIndex = 0 <= ref ? ++j : --j) {
            binary = d3.select(bar.node().appendChild(binaryTemplate.node().cloneNode(true))).style('font-family', 'monospace').attr('transform', "translate(0, " + ((MAX_BINARY_LINES - lineIndex) * BINARY_OFFSET_Y + BINARY_OFFSET_INITIAL_Y) + ")");
            digits = Math.floor(binaryLineCount) !== lineIndex ? BINARY_DIGIT_COUNT : BINARY_DIGIT_COUNT * (binaryLineCount - Math.floor(binaryLineCount));
            randomizedBinary = '';
            for (i = k = 0, ref1 = digits; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {
              randomizedBinary += (Math.ceil(Math.random() * 100)) % 2;
            }
            results.push(binary.select('text').text(randomizedBinary).style('font-family', 'monospace'));
          }
          return results;
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=svg_renderer.js.map
